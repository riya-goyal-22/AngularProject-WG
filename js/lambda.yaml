AWSTemplateFormatVersion: "2010-09-09"

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  S3Bucket:
    Type: AWS::S3::Bucket

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource: !Sub "${S3Bucket.Arn}/*"
            Principal:
              Service: lambda.amazonaws.com
            Condition:
              StringEquals:
                aws:SourceArn: !GetAtt LambdaWithApiGateway.Arn


  LambdaWithApiGateway:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Code:
        ZipFile: |
          import json
          import boto3
          import datetime
          import os
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def handler(event, context):
            logger.info(f"Full event: {json.dumps(event)}") 
            
            s3 = boto3.client('s3')
        
            headers = event.get('headers', {})
            multi_headers = event.get('multiValueHeaders', {})
          
            all_headers = {
                "headers": headers,
                "multiValueHeaders": multi_headers,
                "rawEvent": event  # Include raw event for debugging
            }
            
            timestamp = datetime.datetime.now().strftime('%Y%m%d-%H%M%S')
            key = f'headers/{timestamp}.json'
            
            
            s3.put_object(
                Bucket=os.environ['BUCKET'],
                Key=key,
                Body=json.dumps(all_headers, indent=2)
            )

            return {
                'statusCode': 200,
                'body': json.dumps({
                    'message': 'Headers stored successfully',
                    'stored_headers': headers  # Echo back what we stored
                })
            }
      Environment:
        Variables:
          BUCKET: !Ref S3Bucket
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9